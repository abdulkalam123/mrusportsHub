/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-06-02 06:03:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class select_002dhockey_002dteam_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Enter Hockey Teams</title>\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\r\n");
      out.write("    <link rel=\"icon\" type=\"images/png\" href=\"images/mru logo.png\"/>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1>Enter Hockey Teams</h1>\r\n");
      out.write("        \r\n");
      out.write("        <c:if test=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${not empty message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("            <p class=\"success-message\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${message}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("        </c:if> \r\n");
      out.write("        \r\n");
      out.write("        <form action=\"HockeyTeamServlet\" method=\"post\">\r\n");
      out.write("            <input type=\"hidden\" name=\"match_id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.match_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"action\" value=\"submitTeams\">\r\n");
      out.write("            \r\n");
      out.write("            <h2>Your Team</h2>\r\n");
      out.write("            <div class=\"input-container\">\r\n");
      out.write("                <label class=\"input-label\" for=\"yourTeamName\">Your Team Name:</label>\r\n");
      out.write("                <input type=\"text\" name=\"yourTeamName\" id=\"yourTeamName\" >\r\n");
      out.write("            </div>\r\n");
      out.write("            <table id=\"yourTeamTable\">\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>Player Name</th>\r\n");
      out.write("                    <th>Player Position</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td><input type=\"text\" name=\"yourTeamPlayerName[]\" placeholder=\"Player Name\" required></td>\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <select name=\"yourTeamPlayerPosition[]\" required>\r\n");
      out.write("                            <option value=\"\">Select Position</option>\r\n");
      out.write("                            <option value=\"Goalkeeper\">Goalkeeper</option>\r\n");
      out.write("                            <option value=\"Defender\">Defender</option>\r\n");
      out.write("                            <option value=\"Midfielder\">Midfielder</option>\r\n");
      out.write("                            <option value=\"Forward\">Forward</option>\r\n");
      out.write("                        </select>\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("        \r\n");
      out.write("            <h2>Opposite Team</h2>\r\n");
      out.write("            <div class=\"input-container\">\r\n");
      out.write("                <label class=\"input-label\" for=\"oppositeTeamName\">Opposite Team Name:</label>\r\n");
      out.write("                <input type=\"text\" name=\"oppositeTeamName\" id=\"oppositeTeamName\" >\r\n");
      out.write("            </div>\r\n");
      out.write("            <table id=\"oppositeTeamTable\">\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>Player Name</th>\r\n");
      out.write("                    <th>Player Position</th>\r\n");
      out.write("                </tr>\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <td><input type=\"text\" name=\"oppositeTeamPlayerName[]\" placeholder=\"Player Name\" required></td>\r\n");
      out.write("                    <td>\r\n");
      out.write("                        <select name=\"oppositeTeamPlayerPosition[]\" required>\r\n");
      out.write("                            <option value=\"\">Select Position</option>\r\n");
      out.write("                            <option value=\"Goalkeeper\">Goalkeeper</option>\r\n");
      out.write("                            <option value=\"Defender\">Defender</option>\r\n");
      out.write("                            <option value=\"Midfielder\">Midfielder</option>\r\n");
      out.write("                            <option value=\"Forward\">Forward</option>\r\n");
      out.write("                        </select>\r\n");
      out.write("                    </td>\r\n");
      out.write("                </tr>\r\n");
      out.write("            </table>\r\n");
      out.write("\r\n");
      out.write("            <input type=\"submit\" value=\"Submit Teams\">\r\n");
      out.write("        </form>\r\n");
      out.write("            \r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write(" font-family: 'Lato', sans-serif;\r\n");
      out.write("font-family: 'Sevillana', cursive; \r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Lato:wght@100;300;400;700&family=Sevillana&display=swap'); .\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("* {\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Container styles */\r\n");
      out.write(".container {\r\n");
      out.write("    width: 80%;\r\n");
      out.write("    margin: 0 auto;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    background-color: #f9f9f9;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Heading styles */\r\n");
      out.write("h1, h2 {\r\n");
      out.write("    margin-bottom: 20px;\r\n");
      out.write("    font-family: Arial, sans-serif;\r\n");
      out.write("    color: #333;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Form styles */\r\n");
      out.write("form {\r\n");
      out.write("    margin-bottom: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Table styles */\r\n");
      out.write("table {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    border-collapse: collapse;\r\n");
      out.write("    margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    border: 1px solid #ddd;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("    background-color: #f2f2f2;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Input container styles */\r\n");
      out.write(".input-container {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    margin-bottom: 10px;\r\n");
      out.write("    align-items: flex-end; /* Align items at the bottom */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Input label styles */\r\n");
      out.write(".input-label {\r\n");
      out.write("    flex: 1;\r\n");
      out.write("    margin-right: 10px;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Input styles */\r\n");
      out.write("input[type=\"text\"], select {\r\n");
      out.write("    flex: 1;\r\n");
      out.write("    padding: 8px;\r\n");
      out.write("    border: 1px solid #ccc;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    margin-right: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Button styles */\r\n");
      out.write("input[type=\"submit\"], button {\r\n");
      out.write("    padding: 10px 20px;\r\n");
      out.write("    background-color: #4CAF50;\r\n");
      out.write("    color: #fff;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"submit\"]:hover, button:hover {\r\n");
      out.write("    background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* Responsive styles */\r\n");
      out.write("@media (max-width: 768px) {\r\n");
      out.write("    .container {\r\n");
      out.write("        width: 90%;\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table tr td:last-child {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("button {\r\n");
      out.write("    margin-left: 5px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
